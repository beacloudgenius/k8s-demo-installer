---
# tasks file for k8s cluster
- name: Pull facts on hypervisor
  action: setup
  delegate_to: "{{ hypervisor }}"

- name: Install additional packages to modify VSC qcow image and run VSC as VM - RedHat Host
  yum: name={{ item }} state=present
  with_items:
   - qemu-kvm
   - libvirt
   - bridge-utils
   - libguestfs-tools
   - libvirt-python
  when: ansible_os_family == "RedHat"
  delegate_to: "{{ hypervisor }}"

- name: Install additional packages to modify VSC qcow image and run VSC as VM - Debian Host
  apt: name={{ item }} state=present update_cache=yes cache_valid_time=3600
  with_items:
   - qemu-kvm
   - libvirt-bin
   - bridge-utils
   - libguestfs-tools
   - python-libvirt
  when: ansible_os_family == "Debian"
  delegate_to: "{{ hypervisor }}"

- name: List the Virtual Machine
  virt: command=list_vms
  register: virt_vms
  delegate_to: "{{ hypervisor }}"

- fail: msg="The VM {{ inventory_hostname }} is already defined on this hypervisor."
  when: inventory_hostname in virt_vms.list_vms

- name: Include OS-specific variables.
  include_vars: "{{ ansible_os_family }}.yml"

# Copy qcow2 image to target host
- name: Creates k8s master directory
  file: path={{ images_path }}{{ inventory_hostname }} state=directory owner={{ libvirt.user }} group={{ libvirt.group }}
  delegate_to: "{{ hypervisor }}"

- name: Copy over qcow2 image
  copy: src={{ image_qcow2 }} dest={{ images_path }}{{ inventory_hostname }}/{{ inventory_hostname }}.qcow2 owner={{ libvirt.user }} group={{ libvirt.group }}
  delegate_to: "{{ hypervisor }}"

# Configure master
- name: Setup temporary configuration files
  template: src={{ item }}.j2 backup=no dest={{ images_path }}{{ inventory_hostname }}/{{ item }}
  delegate_to: "{{ hypervisor }}"
  with_items:
    - text1
    - text2

- name: Copy temporary configuration files to the VSC image
  shell: guestfish --rw -a {{ images_path }}{{ inventory_hostname }}/{{ inventory_hostname }}.qcow2 -m {{ image_partition }} copy-in {{ images_path }}{{ inventory_hostname }}/{{ item }} /
  delegate_to: "{{ hypervisor }}"
  with_items:
    - text1
    - text2

- name: Remove temporary configuration files
  file: path={{ images_path }}{{ inventory_hostname }}/{{ item }} state=absent
  delegate_to: "{{ hypervisor }}"
  with_items:
    - txt1
    - txt2

# Define guest VM
- name: Get a list of VMs
  virt: command=list_vms
  register: virt_vms
  delegate_to: "{{ hypervisor }}"

- name: Define guest VM
  virt: name={{ inventory_hostname }}
        command=define
        xml="{{ lookup('template', 'nodes.xml.j2') }}"
  when: inventory_hostname not in virt_vms.list_vms
  delegate_to: "{{ hypervisor }}"

# Start VM
- name: Start guest VM
  virt: name={{ inventory_hostname }} state=running
  delegate_to: "{{ hypervisor }}"

# Assert that VM is running
- name: get guest info
  virt: command=info
  register: virt_info
  delegate_to: "{{ hypervisor }}"

- assert: { that: "virt_info[inventory_hostname]['state'] == 'running'" }
  delegate_to: "{{ hypervisor }}"

